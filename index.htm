<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Template7 - Mobile-first JavaScript Template Engine</title>
<meta property="og:image" content="asset/img/banner.jpg">
<link rel="stylesheet" href="asset/css/normalize.css">
<link rel="stylesheet" href="asset/css/highlight.css">
<link rel="stylesheet" href="asset/css/main.css">
<link rel="shortcut icon" href="asset/img/favicon.png">
<script src="asset/js/modernizr.min.js"></script>
</head>
<body>
<header>
<div class="header-inner">
<div class="header-title"><span>{{</span>Template7<span>}}</span></div>
<div class="header-subtitle">Mobile-first JavaScript Template Engine</div>
<p class="download"><a href="https://github.com/nolimits4web/Template7/archive/v1.0.6.zip">Download</a></p>
<p class="release">MIT Licensed, v1.0.6 released on June 20, 2015 | <a href="https://github.com/nolimits4web/Template7/blob/master/CHANGELOG.md" target="_blank">Changelog</a></p>
<p class="github-buttons">
<a class="github-btn" href="http://ghbtns.com/github-btn.html?user=nolimits4web&repo=template7&type=watch&count=true" width="100" height="20">Star</a>
<a class="github-btn" href="http://ghbtns.com/github-btn.html?user=nolimits4web&repo=template7&type=fork&count=true" width="100" height="20">Fork</a>
</p>
</div>
<div class="share-line">
<div class="addthis_toolbox addthis_default_style ">
<a class="addthis_button_facebook_like" fb:like:layout="button_count">Facebook</a>
<a class="addthis_button_tweet">tweet</a>
<a class="addthis_button_twitter_follow_native" tw:screen_name="idangerous">twitter</a>
<a class="addthis_button_google_plusone" g:plusone:size="medium">google+</a>
<a class="addthis_counter addthis_pill_style">...</a>
</div>
<span class="flattr-button"><a target="_blank" href="https://flattr.com/submit/auto?user_id=nolimits4web&url=http://www.idangero.us/template7/&title=Template7&description=Mobile-first%20JavaScript%20Template%20Engine&language=en_GB&tags=api,programming,mobile,framework&category=software"><img src="asset/img/flattr-badge-large.png"></a></span>
</div>
</header>
<div class="content">
<h1>Template7</h1>
<p>Template7 is a mobile-first JavaScript template engine with <a href="http://handlebarsjs.com/" target="_blank">Handlebars</a>-like syntax. It is used as default template engine in <a href="http://idangero.us/framework7/">Framework7</a></p>
<p>It is ultra lightweight (around 1KB minified and gzipped) and blazing fast (up to 2-3 times faster than Handlebars in mobile Safari).</p>
<h2>Download and install Template7</h2>
<p>First of all we need to download required Template7 files:</p>
<ul>
<li>We can download them from Template7 GitHub <a href="http://github.com/nolimits4web/template7">repository</a></li>
<li>Or we can install them via Bower, enter in terminal:<code>$ bower install template7</code></li>
</ul>
<p>In the downloaded/installed package we need JavaScript files (.js) from the dist/ folder.</p>
<p>And include required script in our HTML page:</p>
<pre><code>&lt;html&gt;
    &lt;head&gt;
        ...
        &lt;script src="path/to/template7.min.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        ...
    &lt;/body&gt;
&lt;/html&gt;          </code></pre>
<h2>Templates</h2>
<p>Template7 templates looks like Handlebars templates, it is like regular HTML but with embedded handlebars expressions:</p>
<pre><code>&lt;div class="list-block"&gt;
  &lt;ul&gt;
    {{#each items}}
    &lt;li class="item-content"&gt;
      &lt;div class="item-inner"&gt;
        &lt;div class="item-title"&gt;{{title}}&lt;/div&gt;
      &lt;/div&gt;
    &lt;/li&gt;
    {{/each}}
  &lt;/ul&gt;
&lt;/div&gt; </code></pre>
<h2>Expressions syntax</h2>
<p>Template7 support expressions with the following syntax:</p>
<h4>Variables:</h4>
<ul>
<li>
<p><code>{{title}}</code> - plain variable. Outputs "title" variable in current context</p>
</li>
<li>
<p><code>{{../title}}</code> - plain variable. Outputs "title" variable in parent context</p>
</li>
<li>
<p><code>{{../../title}}</code> - plain variable. Outputs "title" variable in parent context of parent context</p>
</li>
<li>
<p><code>{{this}}</code> - plain variable. Outputs variable equals to current context</p>
</li>
<li>
<p><code>{{person.name}}</code> - plain variable. Outputs variable equals to "name" property of "person" variable in current context</p>
</li>
<li>
<p><code>{{../person.name}}</code> - plain variable. The same but for parent context</p>
</li>
<li>
<p><code>{{@index}}</code> - access to additional data variable. Such data variables could be used in helpers</p>
</li>
</ul>
<h4>Block expressions</h4>
<ul>
<li>
<p><code>{{#each}}</code> - begin of block expression</p>
</li>
<li>
<p><code>{{else}}</code> - begin of block inverse expression (where supported)</p>
</li>
<li>
<p><code>{{/each}}</code> - end of block expression</p>
</li>
<li>
<p><code>{{#each reverse="true"}}</code> - begin of block expression with passed <code>reverse:true</code> hash arguments</p>
</li>
</ul>
<h4>Helpers</h4>
<p>Helpers could be plain expressions and block expressions:</p>
<ul>
<li>
<p><code>{{join myArray delimiter=", "}}</code> - execute "join" helper and pass there "myArray" variable of current context and <code>delimiter:', '</code> hash argument</p>
</li>
</ul>
<h2>Compilation and Rendering</h2>
<p>Template7 is a globally available Window function.</p>
<p>First of all we need to deliver string template. For example, we can store in script tag:</p>
<pre><code class="html">&lt;script id="template" type="text/template7"&gt;
    &lt;p&gt;Hello, my name is {{firstName}} {{lastName}}&lt;/p&gt;
&lt;/script&gt;</code></pre>
<p>Now we need to compile it in JavaScript. Template7 will convert our template string to plain JavaScript function:</p>
<pre><code>var template = $$('#template').html();
 
// compile it with Template7
var compiledTemplate = Template7.compile(template);
 
// Now we may render our compiled template by passing required context
var context = {
    firstName: 'John',
    lastName: 'Doe'
};
var html = compiledTemplate(context);</code></pre>
<p>Now, <code>html</code> variable will contain:</p>
<pre><code>&lt;p&gt;Hello, my name is John Doe&lt;/p&gt;</code></pre>
<h2>Built-In Helpers</h2>
<p>Helpers in Template7 are like predefined functions that do something with passed context.</p>
<h4>{{#each}}...{{else}}...{{/each}}</h4>
<p><code>{{#each}}</code> is a block expression, that iterates through items of passed Array or through properties of passed Object.</p>
<p>The following additional variables are available inside of this helper:</p>
<ul>
<li>
<p><code>@index</code> - index number of the item. For arrays only</p>
</li>
<li>
<p><code>@first</code> - equal to <b>true</b> for the first item in array. For arrays only</p>
</li>
<li>
<p><code>@last</code> - equal to <b>true</b> for the last item in array. For arrays only</p>
</li>
<li>
<p><code>@key</code> - name of current object property. For objects only</p>
</li>
</ul>
<table class="template7-examples">
<thead>
<tr>
<th>Template -></th>
<th>Context -></th>
<th>Output</th>
</tr>
</thead>
<tbody>
<td colspan="3">Iterate through Array items</td>
<tr>
<td>
<pre><code>&lt;p&gt;Here are the list of people i know:&lt;/p&gt;
&lt;ul&gt;
  {{#each people}}
  &lt;li&gt;{{firstName}} {{lastName}}&lt;/li&gt;
  {{/each}}    
&lt;/ul&gt;          </code></pre>
</td>
<td>
<pre><code>{
  people : [
    {
      firstName: 'John',
      lastName: 'Doe'
    },
    {
      firstName: 'Mark',
      lastName: 'Johnson'
    },
  ]
}      </code></pre>
</td>
<td>
<pre><code>&lt;p&gt;Here are the list of people i know:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;John Doe&lt;/li&gt;
  &lt;li&gt;Mark Johnson&lt;/li&gt;
&lt;/ul&gt;    </code></pre>
</td>
</tr>
<tr>
<td>
<pre><code>&lt;p&gt;Here are the list of people i know:&lt;/p&gt;
&lt;ul&gt;
  {{#each people}}
  &lt;li&gt;{{@index}}. {{this}}&lt;/li&gt;
  {{/each}}    
&lt;/ul&gt;          </code></pre>
</td>
<td>
<pre><code>{
  people : ['John Doe', 'Mark Johnson']
}      </code></pre>
</td>
<td>
<pre><code>&lt;p&gt;Here are the list of people i know:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;0. John Doe&lt;/li&gt;
  &lt;li&gt;1. Mark Johnson&lt;/li&gt;
&lt;/ul&gt;  </code></pre>
</td>
</tr>
<td colspan="3">Iterate through Object properties</td>
<tr>
<td>
<pre><code>&lt;p&gt;Car properties:&lt;/p&gt;
&lt;ul&gt;
  {{#each props}}
  &lt;li&gt;{{@key}}: {{this}}&lt;/li&gt;
  {{/each}}
&lt;/ul&gt;</code></pre>
</td>
<td>
<pre><code>{
  props: {
    power: '150 hp',
    speed: '200 km/h',
  }
}</code></pre>
</td>
<td>
<pre><code>&lt;p&gt;Car properties:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;power: 150 hp&lt;/li&gt;
  &lt;li&gt;speed: 200 kn/h&lt;/li&gt;
&lt;/ul&gt;</code></pre>
</td>
</tr>
<td colspan="3">{{else}} expression.</td>
<tr>
<td>
<pre><code>&lt;p&gt;Car properties:&lt;/p&gt;
&lt;ul&gt;
  {{#each props}}
  &lt;li&gt;{{@key}}: {{this}}&lt;/li&gt;
  {{else}}
  &lt;li&gt;No properties&lt;/li&gt;
  {{/each}}
&lt;/ul&gt;</code></pre>
</td>
<td>
<pre><code>{
  props: {
    power: '150 hp',
    speed: '200 km/h',
  }
}</code></pre>
</td>
<td>
<pre><code>&lt;p&gt;Car properties:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;power: 150 hp&lt;/li&gt;
  &lt;li&gt;speed: 200 kn/h&lt;/li&gt;
&lt;/ul&gt;</code></pre>
</td>
</tr>
<tr>
<td>
<pre><code>&lt;p&gt;Car properties:&lt;/p&gt;
&lt;ul&gt;
  {{#each props}}
  &lt;li&gt;{{@key}}: {{this}}&lt;/li&gt;
  {{else}}
  &lt;li&gt;No properties&lt;/li&gt;
  {{/each}}
&lt;/ul&gt;</code></pre>
</td>
<td>
<pre><code>{}</code></pre>
</td>
<td>
<pre><code>&lt;p&gt;Car properties:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;No properties&lt;/li&gt;
&lt;/ul&gt;</code></pre>
</td>
</tr>
</tbody>
</table>
<h4>{{#if}}...{{else}}...{{/if}}</h4>
<p>{{#if}} helper renders content if passed context is not "false" (or "undefined" or "null" or "" or "0") , otherwise it renders inverse content that optionally could be passed to {{else}} expression inside of helper:</p>
<table class="template7-examples">
<thead>
<tr>
<th>Template -></th>
<th>Context -></th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<pre><code>&lt;a href="#" {{#if active}}class="active"{{/if}}&gt;{{title}}&lt;/a&gt;</code></pre>
</td>
<td>
<pre><code>{
  active: true,
  title: 'Link',
}</code></pre>
</td>
<td>
<pre><code>&lt;a href="#" class="active"&gt;Link&lt;/a&gt;</code></pre>
</td>
</tr>
<td colspan="3">{{else}} expression.</td>
<tr>
<td>
<pre><code>&lt;p&gt;Hello, my name is {{name}}.&lt;/p&gt;
{{#if hobby}}
&lt;p&gt;I have hobby&lt;/p&gt;
{{else}}
&lt;p&gt;I don't have hobby&lt;/p&gt;
{{/if}}                  </code></pre>
</td>
<td>
<pre><code>{
  name: 'John Doe',
  hobby: false
}</code></pre>
</td>
<td>
<pre><code>&lt;p&gt;Hello, my name is John Doe.&lt;/p&gt;
&lt;p&gt;I don't have hobby&lt;/p&gt;</code></pre>
</td>
</tr>
</tbody>
</table>
<h4>{{#unless}}...{{else}}...{{/unless}}</h4>
<p>{{#unless}} helper renders content if passed context is "false" (or "undefined" or "null" or "" or "0") , otherwise it renders inverse content that optionally could be passed to {{else}} expression inside of helper:</p>
<table class="template7-examples">
<thead>
<tr>
<th>Template -></th>
<th>Context -></th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<pre><code>&lt;a href="#" {{#unless active}}class="active"{{/unless}}&gt;{{title}}&lt;/a&gt;</code></pre>
</td>
<td>
<pre><code>{
  active: true,
  title: 'Link',
}</code></pre>
</td>
<td>
<pre><code>&lt;a href="#"&gt;Link&lt;/a&gt;</code></pre>
</td>
</tr>
<td colspan="3">{{else}} expression.</td>
<tr>
<td>
<pre><code>&lt;p&gt;Hello, my name is {{name}}.&lt;/p&gt;
{{#unless hobby}}
&lt;p&gt;I have hobby&lt;/p&gt;
{{else}}
&lt;p&gt;I don't have hobby&lt;/p&gt;
{{/unless}}                  </code></pre>
</td>
<td>
<pre><code>{
  name: 'John Doe',
  hobby: false
}</code></pre>
</td>
<td>
<pre><code>&lt;p&gt;Hello, my name is John Doe.&lt;/p&gt;
&lt;p&gt;I have hobby&lt;/p&gt;</code></pre>
</td>
</tr>
</tbody>
</table>
<h4>{{#with}}...{{/with}}</h4>
<p>{{#with}} helper changes rendering context to the passed context: </p>
<table class="template7-examples">
<thead>
<tr>
<th>Template -></th>
<th>Context -></th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<pre><code>{{#with props}}
&lt;p&gt;Car has {{power}} power and {{speed}} maximum speed&lt;/p&gt;
{{/with}}</code></pre>
</td>
<td>
<pre><code>{
  props: {
    power: '150 hp',
    speed: '200 km/h',
  }
}</code></pre>
</td>
<td>
<pre><code>&lt;p&gt;Car has 150 hp power and 200 km/h maximum speed&lt;/p&gt;</code></pre>
</td>
</tr>
</tbody>
</table>
<h4>{{#variableName}}...{{/variableName}}</h4>
<p>If you pass a block expression with helper name that is in the expression context, then it will work like {{#each}} helper for this context if it is an Array, and will work like {{#with}} helper if it is an Object:</p>
<table class="template7-examples">
<thead>
<tr>
<th>Template -></th>
<th>Context -></th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<pre><code>&lt;ul&gt;
  {{#people}}
  &lt;li&gt;{{name}} - {{age}} years old&lt;/li&gt;
  {{/people}}
&lt;/ul&gt;</code></pre>
</td>
<td>
<pre><code>{
  people: [
    {
      name: 'John Doe',
      age: 18
    },
    {
      name: 'Mark Johnson',
      age: 21
    }
  ]  
}</code></pre>
</td>
<td>
<pre><code>&lt;ul&gt;
  &lt;li&gt;John Doe - 18 years old&lt;/li&gt;
  &lt;li&gt;Mark Johnson - 21 years old&lt;/li&gt;
&lt;/ul&gt;</code></pre>
</td>
</tr>
<tr>
<td>
<pre><code>{{#props}}
&lt;p&gt;Car has {{power}} power and {{speed}} maximum speed&lt;/p&gt;
{{/props}}</code></pre>
</td>
<td>
<pre><code>{
  props: {
    power: '150 hp',
    speed: '200 km/h',
  }
}</code></pre>
</td>
<td>
<pre><code>&lt;p&gt;Car has 150 hp power and 200 km/h maximum speed&lt;/p&gt;</code></pre>
</td>
</tr>
</tbody>
</table>
<h4>{{join delimiter=""}}</h4>
<p>This plain helper will join Array items to single string with passed delimiter</p>
<table class="template7-examples">
<thead>
<tr>
<th>Template -></th>
<th>Context -></th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<pre><code>&lt;h3&gt;"{{title}}" TV Show&lt;/h3&gt;
&lt;p&gt;Was released in year {{year}}&lt;/p&gt;
&lt;p&gt;Genres: {{join genres delimiter=", "}}&lt;/p&gt;</code></pre>
</td>
<td>
<pre><code>{
  title: 'Friends',
  year: 2001,
  genres: ['comedy', 'drama']
}</code></pre>
</td>
<td>
<pre><code>&lt;h3&gt;"Friends" TV Show&lt;/h3&gt;
&lt;p&gt;Was released in year 2001&lt;/p&gt;
&lt;p&gt;Genres: comedy, drama&lt;/p&gt;</code></pre>
</td>
</tr>
</tbody>
</table>
<h4>{{escape}}</h4>
<p>This plain helper returns escaped HTML string. It escapes only the following characters: <code>&lt; &gt; " &amp;</code></p>
<table class="template7-examples">
<thead>
<tr>
<th>Template -></th>
<th>Context -></th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<pre><code>&lt;h1&gt;{{title}}&lt;/h1&gt;
&lt;p&gt;{{escape body}}&lt;/p&gt;</code></pre>
</td>
<td>
<pre><code>{
  title: 'Paragraphs',
  body: 'We need to use &lt;p&gt; tags to add paragraphs in HTML',
}</code></pre>
</td>
<td>
<pre><code>&lt;h1&gt;Paragraphs&lt;/h1&gt;
&lt;p&gt;We need to use &amp;lt;p&amp;gt; tags to add paragraphs in HTML&lt;/p&gt;</code></pre>
</td>
</tr>
</tbody>
</table>
<h4>{{js "expression"}}</h4>
<p>This inline helper allows to execute some simple JavaScript directly in template to modify/check context on the fly or for some JS calculations</p>
<table class="template7-examples">
<thead>
<tr>
<th>Template -></th>
<th>Context -></th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<pre><code>&lt;h3&gt;{{title}}&lt;/h3&gt;
&lt;p&gt;Price: ${{js "this.price * 1.2"}} &lt;/p&gt;
&lt;p&gt;{{js "this.inStock ? 'In Stock' : 'Not in stock'"}} &lt;/p&gt;</code></pre>
</td>
<td>
<pre><code>{
  title: 'iPhone 6 Plus',
  price: 1000,
  inStock: true
}</code></pre>
</td>
<td>
<pre><code>&lt;h3&gt;iPhone 6 Plus&lt;/h3&gt;
&lt;p&gt;Price: $1200&lt;/p&gt;
&lt;p&gt;In stock&lt;/p&gt;</code></pre>
</td>
</tr>
</tbody>
</table>
<h4>{{#js_compare "expression"}}...{{/js_compare}}</h4>
<p>Block helper for easier compares of context variables. It renders content if JavaScript expression is not "false" (or "undefined" or "null" or "" or "0") , otherwise it renders inverse content that optionally could be passed to {{else}} expression inside of helper</p>
<table class="template7-examples">
<thead>
<tr>
<th>Template -></th>
<th>Context -></th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<pre><code class="html">&lt;h3&gt;{{title}}&lt;/h3&gt;
&lt;p&gt;Price: ${{price}} &lt;/p&gt;
&lt;p&gt;{{#js_compare "color === 'white' && memory > 16"}}Not in stock{{else}}In stock{{/js_compare}} &lt;/p&gt;</code></pre>
</td>
<td>
<pre><code>{
  title: 'iPhone 6 Plus',
  price: 1000,
  color: 'white',
  memory: 32
}</code></pre>
</td>
<td>
<pre><code>&lt;h3&gt;iPhone 6 Plus&lt;/h3&gt;
&lt;p&gt;Price: $1000&lt;/p&gt;
&lt;p&gt;Not in stock&lt;/p&gt;</code></pre>
</td>
</tr>
<tr>
<td>
<pre><code class="html">&lt;p&gt;{{#js_compare "a === b"}}A equals to B{{else}}A not equal to B{{/js_compare}} &lt;/p&gt;</code></pre>
</td>
<td>
<pre><code>{
  a: 5,
  b: 34
}</code></pre>
</td>
<td>
<pre><code>&lt;p&gt;A not equal to B&lt;/p&gt;</code></pre>
</td>
</tr>
</tbody>
</table>
<p class="important-note">Nore that in <b>js</b> and in <b>js_compare</b> helper you may need to use <code><b>this.</b>variableName</code> instead of just <code>variableName</code></p>
<h2>Using Custom Helpers</h2>
<p>Template7 allows to register custom helpers with the following method:</p>
<div class="method-wrap">
<p><span class="method">Template7.registerHelper(<span>name</span>, <span>helper</span>) </span></p>
<ul class="method-parameters">
<li><span class="parameter">name - </span><span class="parameter-type">string</span> - helper name</li>
<li><span class="parameter">helper - </span><span class="parameter-type">function</span> - helper function to handle passed context</li>
</ul>
</div>
<p>Helper function could accepts as many arguments as required, arguments could be context, strings and hash data.</p>
<p>Let's look how to register helper on example of simple {{#if}} helper:</p>
<pre><code>Template7.registerHelper('if', function (condition, options) {
  // "this" in function context is equal to the expression execution context
  // "condition" argument contains passed context/condition
  /*
    @options contains object with the wollowing properties and methods:
    "hash" - contains passed hash object with parameters
    "fn" - method to pass helper block content further to compilier
    "inverse" - method to pass helper block inverse ({{else}}) content further to compilier
    "data" - contains additional expression data, like @index for arrays or @key for object
  */
 
  // First we need to check is the passed context is function
  if (typeof condition === 'function') condition = condition.call(this);
 
  // If context condition
  if (condition) {
    // We need to pass block content further to compilier with the same context and the same data:
    options.fn(this, options.data);
  }
  else {
    // We need to pass block inverse ({{else}}) content further to compilier with the same context and the same data:
    options.inverse(this, options.data);
  }
}); </code></pre>
<p>Or on example of plain {{join}} helper:</p>
<pre><code>Template7.registerHelper('join', function (arr, options) {
  // First we need to check is the passed arr argument is function
  if (typeof arr === 'function') arr = arr.call(this);
 
  /* 
    Passed delimiter is in the options.hash object:
    console.log(options.hash) -> {delimiter: ', '}
  */
 
  // And return joined array
  return arr.join(options.hash.delimiter);
});          </code></pre>
<p>Or we can create helper to create <a href="http://www.idangero.us/framework7/docs/list-view.html#list-view-layout" target="_blank">Framework7's list-block</a> link to work with this syntax:</p>
<pre><code>{{link url title target="_blank"}}</code></pre>
<pre><code>Template7.registerHelper('link', function (url, title, options){
  var ret = '&lt;li&gt;' +
              '&lt;a href="' + url + '" class="item-content item-link" target="' + options.hash.target + '"&gt;' +
                '&lt;div class="item-inner"&gt;' +
                  '&lt;div class="item-title"&gt;' + title + '&lt;/div&gt;' +
                '&lt;/div&gt;' +
              '&lt;/a&gt;' +
            '&lt;/li&gt;';
  return ret;
});</code></pre>
<table class="template7-examples">
<thead>
<tr>
<th>Template -></th>
<th>Context -></th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<pre><code>&lt;div class="list-block"&gt;
  &lt;ul&gt;
    {{#each links}}
    {{link url title target="_blank"}}
    {{/each}}    
  &lt;/ul&gt;
&lt;/div&gt;</code></pre>
</td>
<td>
<pre><code>{
  links: [
    {
      url: 'http://google.com',
      title: 'Google'
    },
    {
      url: 'http://idangero.us',
      title: 'iDangero.us'
    },
  ]
}</code></pre>
</td>
<td>
<pre><code>&lt;div class="list-block"&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href="http://google.com" target="_blank" class="item-link item-content"&gt;
        &lt;div class="item-inner"&gt;
          &lt;div class="item-title"&gt;Google&lt;/div&gt;
        &lt;/div&gt;
      &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="http://idangero.us" target="_blank" class="item-link item-content"&gt;
        &lt;div class="item-inner"&gt;
          &lt;div class="item-title"&gt;iDangero.us&lt;/div&gt;
        &lt;/div&gt;
      &lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</code></pre>
</td>
</tr>
</tbody>
</table><br>
<div class="important-note">
<p>Note, that all custom helpers should be registered before you compile templates with these helpers!</p>
</div>
<h2>Remove Custom Helpers</h2>
<p>Template7 allows to remove custom helpers with the following method:</p>
<div class="method-wrap">
<p><span class="method">Template7.unregisterHelper(<span>name</span>) </span></p>
<ul class="method-parameters">
<li><span class="parameter">name - </span><span class="parameter-type">string</span> - helper name</li>
</ul>
</div>
<h2>Global Context</h2>
<p>Template7 also supports global context which is accessible from any context. </p>
<p>We can specify it in <code>Template7.global</code> property:</p>
<pre><code>Template7.global = {
    os: 'iOS',
    browser: 'Chrome',
    username: 'johndoe',
    email: '<a class="__cf_email__" href="/cdn-cgi/l/email-protection" data-cfemail="22484d4a4c62464d470c414d4f">[email&#160;protected]</a><script data-cfhash='f9e31' type="text/javascript">
/* <![CDATA[ */!function(){try{var t="currentScript"in document?document.currentScript:function(){for(var t=document.getElementsByTagName("script"),e=t.length;e--;)if(t[e].getAttribute("data-cfhash"))return t[e]}();if(t&&t.previousSibling){var e,r,n,i,c=t.previousSibling,a=c.getAttribute("data-cfemail");if(a){for(e="",r=parseInt(a.substr(0,2),16),n=2;a.length-n;n+=2)i=parseInt(a.substr(n,2),16)^r,e+=String.fromCharCode(i);e=document.createTextNode(e),c.parentNode.replaceChild(e,c)}t.parentNode.removeChild(t);}}catch(u){}}()/* ]]> */</script>'
};</code></pre>
<p>To access it in templates we need to use <code>{{@global}}</code> variable:</p>
<pre><code class="html">&lt;p&gt;Hello, {{@global.username}}. Your email is {{@global.email}}&lt;/p&gt;</code></pre>
<h2>Access To Root Context</h2>
<p>Sometimes we may need to access to initially passed root context in our templates. For this case we need to use <code>{{@root}}</code> variable. This is especially helpful when we are deep in context:</p>
<pre><code class="js">{
    persons: [
        {
            name: 'John',
            hobby: ['Cars', 'Food']
        },
        {
            name: 'Kyle',
            hobby: ['Travel', 'Puzzles']
        },
 
    ],
    showHobby: true
}    </code></pre>
<pre><code>{{#each persons}}
    &lt;h2&gt;{{name}}&lt;/h2&gt;
    &lt;h3&gt;Hobby:&lt;/h3&gt;
    {{#if @root.showHobby}}
        &lt;ul&gt;
            {{#each hobby}}
                &lt;li&gt;{{this}}&lt;/li&gt;
            {{/each}}
        &lt;/ul&gt;
    {{/if}}
{{/each}} </code></pre>
<h2>Partials</h2>
<p>Template7 allows to reuse template using through partials. Partials are normal usual Template7 templates that may be called by other templates.</p>
<p>We can register and unregister partials using the following methods:</p>
<div class="method-wrap">
<p><span class="method">Template7.registerPartial(<span>name</span>, <span>template</span>) </span>- register partial</p>
<ul class="method-parameters">
<li><span class="parameter">name - </span><span class="parameter-type">string</span> - partial name</li>
<li><span class="parameter">helper - </span><span class="parameter-type">string</span> - partial template</li>
</ul>
</div>
<div class="method-wrap">
<p><span class="method">Template7.unregisterPartial(<span>name</span>) </span>- unregister partial</p>
<ul class="method-parameters">
<li><span class="parameter">name - </span><span class="parameter-type">string</span> - partial name</li>
</ul>
</div>
<p>Then we can use our partials using special helper <code>{{&gt; "partialName"}}</code></p>
<p><b>Template:</b></p>
<pre><code class="hbs">&lt;ul class="users"&gt;
    {{#each users}}
    {{&gt; "user"}}
    {{/each}}
&lt;/ul&gt;
&lt;ul class="admins"&gt;
    {{#each admins}}
    {{&gt; "user"}}
    {{/each}}
&lt;/ul&gt;</code></pre>
<p><b>Register partial</b>:</p>
<pre><code class="js">Template7.registerPartial('user', '&lt;li&gt;&lt;h2&gt;{{firstName}} {{lastName}}&lt;/h2&gt;&lt;p&gt;{{bio}}&lt;/p&gt;&lt;/li&gt;')</code></pre>
<p><b>Apply to the template this context</b>:</p>
<pre><code>{
    users: [
        {
            firstName: 'John',
            lastName: 'Doe',
            bio: 'Lorem ipsum dolor'
        },
        {
            firstName: 'Jane',
            lastName: 'Doe',
            bio: 'Donec sodales euismod augue'
        }
    ],
    admins: [
        {
            firstName: 'Mike',
            lastName: 'Doe',
            bio: 'Lorem ipsum dolor'
        },
        {
            firstName: 'Kate',
            lastName: 'Doe',
            bio: 'Donec sodales euismod augue'
        }
    ]
}</code></pre>
<p><b>And we will get the following output:</b></p>
<pre><code>        
&lt;ul class="users"&gt;
    &lt;li&gt;
        &lt;h2&gt;John Doe&lt;/h2&gt;
        &lt;p&gt;Lorem ipsum dolor&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;h2&gt;Jane Doe&lt;/h2&gt;
        &lt;p&gt;Donec sodales euismod augue&lt;/p&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;ul class="admins"&gt;
    &lt;li&gt;
        &lt;h2&gt;Mike Doe&lt;/h2&gt;
        &lt;p&gt;Lorem ipsum dolor&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;h2&gt;Kate Doe&lt;/h2&gt;
        &lt;p&gt;Donec sodales euismod augue&lt;/p&gt;
    &lt;/li&gt;
&lt;/ul&gt;    </code></pre>
<h2>Recursive Partials </h2>
<p>We can even use partials to make recursive templates, like nested comments:</p>
<pre><code>// Simple template with just a partial
var template = '{{&gt; "comments"}}'
 
// Register partial
Template7.registerPartial(
    'comments', 
    '&lt;ul&gt;' + 
        '{{#each comments}}' +
            '&lt;li&gt;' +
            '&lt;h2&gt;{{author}}&lt;/h2&gt;' +
            '&lt;p&gt;{{text}}&lt;/p&gt;' +
            '{{#if comments}}{{&gt; "comments"}}{{/if}}' +
            '&lt;/li&gt;' +
        '{{/each}}' +
    '&lt;/ul&gt;'
);
 
// Compile template 
var compiledTemplate = Template7.compile(template);
 
// Render template 
var output = compiledTemplate({
    comments: [
        {
            author: 'John Doe',
            text: 'Lorem ipsum dolor',
            comments: [
                {
                    author: 'Mike Doe',
                    text: 'Aliquam erat volutpat'
                },
                {
                    author: 'Kate Doe',
                    text: 'Donec eget fringilla turpis'
                }
            ]
        },
        {
            author: 'Jane Doe',
            text: 'Donec sodales euismod augue'
        }
    ]
})</code></pre>
<p>And the output will be:</p>
<pre><code>&lt;ul class="comments"&gt;
    &lt;li&gt;
        &lt;h2&gt;John Doe&lt;/h2&gt;
        &lt;p&gt;Lorem ipsum dolor&lt;/p&gt;
        &lt;ul class="comments"&gt;
            &lt;li&gt;
                &lt;h2&gt;Mike Doe&lt;/h2&gt;
                &lt;p&gt;Aliquam erat volutpat&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
                &lt;h2&gt;Kate Doe&lt;/h2&gt;
                &lt;p&gt;Donec eget fringilla turpis&lt;/p&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;h2&gt;Jane Doe&lt;/h2&gt;
        &lt;p&gt;Donec sodales euismod augue&lt;/p&gt;
    &lt;/li&gt;
&lt;/ul&gt;          </code></pre>
<h2>Performance Tips</h2>
<p>Template7 is fast and you can make it even faster in your apps. The slowest part (but still very fast in T7) in compilation/rendering process is the compilation from string to pure JS function when you do <code>Template7.compile()</code>. So don't compile the same templates multiple times, one time will be enough:</p>
<pre><code>// Begin of your app
 
// Compile templates once on app load/init
var searchTemplate = $('script#search-template').html();
var compiledSearchTemplate = Template7.compile(searchTemplate);
 
var listTemplate = $('script#list-template').html();
var compiledListTemplate = Template7.compile(listTemplate);
 
// That is all, now and further just execute compiled templates with required context
// Just execute compiled search template with required content:
var html = compiledSearchTemplate({/*...some data...*/});
 
// Do something with html...
 </code></pre>
</div>
<footer>
<div class="share-line">
<div class="addthis_toolbox addthis_default_style ">
<a class="addthis_button_facebook_like" fb:like:layout="button_count">Facebook</a>
<a class="addthis_button_tweet">tweet</a>
<a class="addthis_button_twitter_follow_native" tw:screen_name="idangerous">twitter</a>
<a class="addthis_button_google_plusone" g:plusone:size="medium">google+</a>
<a class="addthis_counter addthis_pill_style">...</a>
</div>
</div>
<div class="footer-inner">
<p>2015 © Template7 by iDangero.us</p>
</div>
</footer>
<script src="asset/js/jquery.min.js"></script>
<script src="asset/js/plugins.js"></script>
<script src="asset/js/main.js"></script>
</body>
</html>